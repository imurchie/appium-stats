'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _indexJs = require('../index.js');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var should = _chai2['default'].should();

describe('fs', function () {
  var _this = this;

  it("should exist", function () {
    should.exist(_indexJs.fs);
  });
  it("should have expected methods", function () {
    should.exist(_indexJs.fs.open);
    should.exist(_indexJs.fs.close);
    should.exist(_indexJs.fs.access);
    should.exist(_indexJs.fs.mkdir);
    should.exist(_indexJs.fs.readlink);
    should.exist(_indexJs.fs.exists);
    should.exist(_indexJs.fs.rimraf);
    should.exist(_indexJs.fs.readFile);
    should.exist(_indexJs.fs.writeFile);
    should.exist(_indexJs.fs.lstat);
    should.exist(_indexJs.fs.mv);
  });

  describe("mkdir", function () {
    var dirName = _path2['default'].resolve(__dirname, "tmp");

    it("should make a directory that doesn't exist", function callee$2$0() {
      var exists;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_indexJs.fs.rimraf(dirName));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_indexJs.fs.mkdir(dirName));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_indexJs.fs.hasAccess(dirName));

          case 6:
            exists = context$3$0.sent;

            exists.should.be['true'];

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it("should not complain if the dir already exists", function callee$2$0() {
      var exists;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_indexJs.fs.hasAccess(dirName));

          case 2:
            exists = context$3$0.sent;

            exists.should.be['true'];
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_indexJs.fs.mkdir(dirName));

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it("should still throw an error if something else goes wrong", function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_indexJs.fs.mkdir("/bin/foo").should.be.rejected);

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  it('hasAccess', function callee$1$0() {
    var existingPath, nonExistingPath;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          existingPath = _path2['default'].resolve(__dirname, 'fs-specs.js');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(existingPath));

        case 3:
          context$2$0.sent.should.be.ok;
          nonExistingPath = _path2['default'].resolve(__dirname, 'wrong-specs.js');
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_indexJs.fs.hasAccess(nonExistingPath));

        case 7:
          context$2$0.sent.should.not.be.ok;

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('exists', function callee$1$0() {
    var existingPath, nonExistingPath;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          existingPath = _path2['default'].resolve(__dirname, 'fs-specs.js');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(existingPath));

        case 3:
          context$2$0.sent.should.be.ok;
          nonExistingPath = _path2['default'].resolve(__dirname, 'wrong-specs.js');
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(nonExistingPath));

        case 7:
          context$2$0.sent.should.not.be.ok;

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('readFile', function callee$1$0() {
    var existingPath;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          existingPath = _path2['default'].resolve(__dirname, 'fs-specs.js');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_indexJs.fs.readFile(existingPath, 'utf8'));

        case 3:
          context$2$0.sent.should.contain('readFile');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('copyFile', function callee$1$0() {
    var existingPath, newPath;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          existingPath = _path2['default'].resolve(__dirname, 'fs-specs.js');
          newPath = _path2['default'].resolve('/tmp', 'fs-specs.js');
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_indexJs.fs.copyFile(existingPath, newPath));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_indexJs.fs.readFile(newPath, 'utf8'));

        case 6:
          context$2$0.sent.should.contain('readFile');

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('rimraf', function callee$1$0() {
    var newPath;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          newPath = _path2['default'].resolve('/tmp', 'fs-specs.js');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(newPath));

        case 3:
          context$2$0.sent.should.be['true'];
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_indexJs.fs.rimraf(newPath));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(newPath));

        case 8:
          context$2$0.sent.should.be['false'];

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('md5', function callee$1$0() {
    var existingPath;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          existingPath = _path2['default'].resolve(__dirname, 'fs-specs.js');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_indexJs.fs.md5(existingPath));

        case 3:
          context$2$0.sent.should.have.length(32);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('stat', function callee$1$0() {
    var existingPath, stat;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          existingPath = _path2['default'].resolve(__dirname, 'fs-specs.js');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_indexJs.fs.stat(existingPath));

        case 3:
          stat = context$2$0.sent;

          stat.should.have.property('atime');

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,